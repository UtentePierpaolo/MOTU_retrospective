dfrcoeff[1,"vgroup"] <- 0
dfrcoeff[1,"varname"] <- "(Intercept)"
View(dfrcoeff)
indr <- 2 # row
for (indg in 1:length(labels(ms$terms))){
cvar <- labels(ms$terms)[indg]
if(is.factor(dfr[,cvar])){
nrep <- nlevels(dfr[,cvar])-1
} else{
nrep <- 1
}
dfrcoeff[indr:(indr+nrep-1),"vgroup"] <- indg
dfrcoeff[indr:(indr+nrep-1),"varname"] <- cvar
indr <- indr+nrep
}
View(dfrcoeff)
# add levelValue
for (indr in 1:nrow(dfrcoeff)){
dfrcoeff[indr,"levelValue"] <- sub(x=dfrcoeff[indr,"codingvar"], pattern=dfrcoeff[indr,"varname"], replacement="")
}
# delete not-included variables
dfrcoeff2 <- dfrcoeff[is.na(dfrcoeff$coefficient) | dfrcoeff$coefficient!=0,]
View(dfrcoeff2)
# add line for reference level of selected categorical variables
# selected categorical variables
catvar <- names(dfr)[sapply(dfr, is.factor)]
selcatvar <- intersect(catvar, dfrcoeff2$varname)
for (indc in 1:length(selcatvar)){
activeLevels <- dfrcoeff2[dfrcoeff2$varname %in% selcatvar[indc], "levelValue"]
# allLevels <- dfrvar3[dfrvar3$varName %in% catvar[indc], "levelValue"]
allLevels <- levels(dfr[,selcatvar[indc]])
allLevels[is.na(allLevels)] <- "NA"
refLevel <- setdiff(allLevels, activeLevels)
if (length(refLevel)==1){
dfrcoeff2 <- add_row(dfrcoeff2, varname=selcatvar[indc], levelValue=refLevel)
} else{
stop("not 1 refLevel")
}
}
# add varLabel and levelLabel
dfrcoeff2 <- merge(dfrcoeff2, dfrvar3,
by.x=c("varname","levelValue"), by.y=c("varName","levelValue"),all.x=T)
rm(list=ls())
gc()
# data and packages-----------------------------
# load("D:/Depression/resultsGroupLasso.RData")
# load("D:/Depression/GroupLasso_nvar_3.RData")
load("D:/Depression/GroupLasso_nvar_4.RData")
require(readxl)
require(tibble)
vartokeep <- c("regvar", "catvar","contvar","ms1","dfr","lext","foldvext")
rm(list=setdiff(ls(),vartokeep))
# information on variables-------------------------------
# for variable labels
varlabels <- as.data.frame(read_xlsx(path="C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Depression/report_29_12_2019.xlsx",
sheet="Odds ratios", skip=2))
# for names on each categorical variable level
# import information about variables
addrvinfo <- "D:/datasets/share/6.1.1/generated codebooks w5/"
lfiles <- list.files(path=addrvinfo)
# for the moment, only variable names
lfiles <- lfiles[grep("values", lfiles)]
# set seed
set.seed(38956)
# variable and value/level labels--------------
varlabels <- varlabels[,c("Variable name","Variable label")]
varlabels <- varlabels[!is.na(varlabels$`Variable name`),]
# collect all values for variables in regvar
dfrvar <- data.frame(varName=NA, levelValue=NA, levelLabel=NA)
lrem <- regvar # list of remaining regression variables
# select all variables from each data.frame
for (indf in 1:length(lfiles)){
cfe <- as.data.frame(read_xls(path=paste0(addrvinfo,lfiles[indf]), skip=1))
names(cfe) <- c("varName","levelValue","levelLabel")
cfe$levelValue <- as.numeric(cfe$levelValue)
# fill NA with above values
wna <- which(is.na(cfe$varName))
for (indr in wna){
cfe[wna, "varName"] <- cfe[wna-1, "varName"]
}
dfrvar <- rbind(dfrvar, cfe[cfe$varName %in% lrem,])
lrem <- setdiff(lrem, dfrvar$varName)
}
# add also those not found
dfrvar <- rbind(dfrvar, data.frame(varName=lrem, levelValue=NA, levelLabel=NA))
# collapse negative values (and labels) to NA
dfrvar1 <- dfrvar
dfrvar1[!is.na(dfrvar1$levelValue) & dfrvar1$levelValue<0, "levelValue"] <- NA
dfrvar1$levelValue[is.na(dfrvar1$levelValue)] <- "NA"
# for continuous variables, keep only one row with empty levelValue and levelLabel
dfrvar1_cont <- dfrvar1[dfrvar1$varName %in% contvar,]
dfrvar1_cont$levelValue <- ""
dfrvar1_cont$levelLabel <- ""
dfrvar1_cont <- unique(dfrvar1_cont)
dfrvar1_cat <- dfrvar1[dfrvar1$varName %in% catvar,]
dfrvar1 <- rbind(dfrvar1_cont, dfrvar1_cat)
dfrvar1$levelValue <- factor(dfrvar1$levelValue)
dfrvar1$levelLabel <- factor(dfrvar1$levelLabel, exclude=NULL)
dfrvar2 <- aggregate(levelLabel ~ varName+levelValue, data=dfrvar1, FUN=function(x) paste0(x, collapse=", ")) #
# add variable labels
dfrvar3 <- merge(dfrvar2, varlabels, by.x="varName", by.y="Variable name")
names(dfrvar3)[names(dfrvar3)=="Variable label"] <- "varLabel"
View(dfrvar3)
rm(list=ls())
gc()
?read_xlsx
# data and packages-----------------------------
# load("D:/Depression/resultsGroupLasso.RData")
# load("D:/Depression/GroupLasso_nvar_3.RData")
# load("D:/Depression/GroupLasso_nvar_4.RData")
# require(WeightedROC)
# require(grplasso)
# require(ggplot2)
require(readxl)
vartokeep <- c("regvar", "catvar","contvar","ms1","dfr","lext","foldvext")
rm(list=setdiff(ls(),vartokeep))
# information on variables-------------------------------
# for variable labels
varlabels <- as.data.frame(read_xlsx(path="C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Depression/report_29_12_2019.xlsx",
sheet="Odds ratios", skip=2))
# for names on each categorical variable level
# import information about variables
addrvinfo <- "D:/datasets/share/6.1.1/generated codebooks w5/"
lfiles <- list.files(path=addrvinfo)
# for the moment, only variable names
lfiles <- lfiles[grep("values", lfiles)]
# set seed
set.seed(38956)
# variable and value/level labels--------------
varlabels <- varlabels[,c("Variable name","Variable label")]
varlabels <- varlabels[!is.na(varlabels$`Variable name`),]
# collect all values for variables in regvar
dfrvar <- data.frame(varName=NA, levelValue=NA, levelLabel=NA)
lrem <- regvar # list of remaining regression variables
rm(list=ls())
gc()
# data and packages-----------------------------
# load("D:/Depression/resultsGroupLasso.RData")
# load("D:/Depression/GroupLasso_nvar_3.RData")
# require(WeightedROC)
# require(grplasso)
# require(ggplot2)
require(readxl)
load("D:/Depression/GroupLasso_nvar_4.RData")
vartokeep <- c("regvar", "catvar","contvar","ms1","dfr","lext","foldvext")
rm(list=setdiff(ls(),vartokeep))
rm(list=ls())
gc()
# data and packages-----------------------------
# load("D:/Depression/resultsGroupLasso.RData")
# load("D:/Depression/GroupLasso_nvar_3.RData")
# require(WeightedROC)
# require(grplasso)
# require(ggplot2)
require(readxl)
load("D:/Depression/GroupLasso_nvar_4.RData")
vartokeep <- c("regvar", "catvar","contvar") #,"ms1","dfr","lext","foldvext")
rm(list=setdiff(ls(),vartokeep))
# information on variables-------------------------------
# for variable labels
varlabels <- as.data.frame(read_xlsx(path="C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Depression/report_29_12_2019.xlsx",
sheet="Odds ratios", skip=2))
# for names on each categorical variable level
# import information about variables
addrvinfo <- "D:/datasets/share/6.1.1/generated codebooks w5/"
lfiles <- list.files(path=addrvinfo)
# for the moment, only variable names
lfiles <- lfiles[grep("values", lfiles)]
# set seed
set.seed(38956)
# variable and value/level labels--------------
varlabels <- varlabels[,c("Variable name","Variable label")]
varlabels <- varlabels[!is.na(varlabels$`Variable name`),]
# collect all values for variables in regvar
dfrvar <- data.frame(varName=NA, levelValue=NA, levelLabel=NA)
lrem <- regvar # list of remaining regression variables
# select all variables from each data.frame
for (indf in 1:length(lfiles)){
cfe <- as.data.frame(read_xls(path=paste0(addrvinfo,lfiles[indf]), skip=1))
names(cfe) <- c("varName","levelValue","levelLabel")
cfe$levelValue <- as.numeric(cfe$levelValue)
# fill NA with above values
wna <- which(is.na(cfe$varName))
for (indr in wna){
cfe[wna, "varName"] <- cfe[wna-1, "varName"]
}
dfrvar <- rbind(dfrvar, cfe[cfe$varName %in% lrem,])
lrem <- setdiff(lrem, dfrvar$varName)
}
# add also those not found
dfrvar <- rbind(dfrvar, data.frame(varName=lrem, levelValue=NA, levelLabel=NA))
# collapse negative values (and labels) to NA
dfrvar1 <- dfrvar
dfrvar1[!is.na(dfrvar1$levelValue) & dfrvar1$levelValue<0, "levelValue"] <- NA
dfrvar1$levelValue[is.na(dfrvar1$levelValue)] <- "NA"
# for continuous variables, keep only one row with empty levelValue and levelLabel
dfrvar1_cont <- dfrvar1[dfrvar1$varName %in% contvar,]
dfrvar1_cont$levelValue <- ""
dfrvar1_cont$levelLabel <- ""
dfrvar1_cont <- unique(dfrvar1_cont)
dfrvar1_cat <- dfrvar1[dfrvar1$varName %in% catvar,]
dfrvar1 <- rbind(dfrvar1_cont, dfrvar1_cat)
dfrvar1$levelValue <- factor(dfrvar1$levelValue)
dfrvar1$levelLabel <- factor(dfrvar1$levelLabel, exclude=NULL)
dfrvar2 <- aggregate(levelLabel ~ varName+levelValue, data=dfrvar1, FUN=function(x) paste0(x, collapse=", ")) #
# add variable labels
dfrvar3 <- merge(dfrvar2, varlabels, by.x="varName", by.y="Variable name")
names(dfrvar3)[names(dfrvar3)=="Variable label"] <- "varLabel"
View(dfrvar3)
names(dfrvar3)
dfrvar3 <- dfrvar3[,c( "varName","varLabel","levelValue","levelLabel")]
notes <- "produced with infoVariables.R"
load("D:/Depression/infoVariables.RData")
save(file="D:/Depression/infoVariables.RData",
list=c("notes","dfrvar3"))
rm(list=ls())
gc()
source("C:/Users/Pierpaolo/Dropbox/R/Depression/f_TabulateCoefficients_DepNoDep.R")
rm(list=ls())
# models
load("D:/Depression/DepNoDep_models.RData")
rm("dfr")
# information on variables (names, levels, labels)
load("D:/Depression/infoVariables.RData")
infoVar=dfrvar3
dfr=dfr0
wopt=ilambdalean0
ms=ms0
dfrcoeff <- data.frame(codingvar=names(ms$coefficients[,wopt]),
coefficient=ms$coefficients[,wopt])
dfrcoeff$vgroup <- NA
dfrcoeff$varname <- NA
dfrcoeff$levelValue <- NA
dfrcoeff[1,"vgroup"] <- 0
dfrcoeff[1,"varname"] <- "(Intercept)"
indr <- 2 # row
for (indg in 1:length(labels(ms$terms))){
cvar <- labels(ms$terms)[indg]
if(is.factor(dfr[,cvar])){
nrep <- nlevels(dfr[,cvar])-1
} else{
nrep <- 1
}
dfrcoeff[indr:(indr+nrep-1),"vgroup"] <- indg
dfrcoeff[indr:(indr+nrep-1),"varname"] <- cvar
indr <- indr+nrep
}
# add levelValue
for (indr in 1:nrow(dfrcoeff)){
dfrcoeff[indr,"levelValue"] <- sub(x=dfrcoeff[indr,"codingvar"], pattern=dfrcoeff[indr,"varname"], replacement="")
}
# delete not-included variables
dfrcoeff2 <- dfrcoeff[is.na(dfrcoeff$coefficient) | dfrcoeff$coefficient!=0,]
# add line for reference level of selected categorical variables
# selected categorical variables
catvar <- names(dfr)[sapply(dfr, is.factor)]
selcatvar <- intersect(catvar, dfrcoeff2$varname)
for (indc in 1:length(selcatvar)){
activeLevels <- dfrcoeff2[dfrcoeff2$varname %in% selcatvar[indc], "levelValue"]
# allLevels <- infoVar[infoVar$varName %in% catvar[indc], "levelValue"]
allLevels <- levels(dfr[,selcatvar[indc]])
allLevels[is.na(allLevels)] <- "NA"
refLevel <- setdiff(allLevels, activeLevels)
if (length(refLevel)==1){
dfrcoeff2 <- add_row(dfrcoeff2, varname=selcatvar[indc], levelValue=refLevel)
} else{
stop("not 1 refLevel")
}
}
# add varLabel and levelLabel
dfrcoeff2 <- merge(dfrcoeff2, infoVar,
by.x=c("varname","levelValue"), by.y=c("varName","levelValue"),all.x=T)
# sort wrt varname
dfrcoeff2 <- dfrcoeff2[order(dfrcoeff2$varname),]
# delete repeated varname, coefficient, variable name
dfrcoeff2$varnametemp <- dfrcoeff2$varname
for (indr in 2:nrow(dfrcoeff2)){
if (dfrcoeff2[indr,"varnametemp"]==dfrcoeff2[indr-1,"varnametemp"]){
dfrcoeff2[indr,c("varname","varLabel")] <- c("","")
}
}
# table to report
dfrcoeff3 <- dfrcoeff2[,c("varname","varLabel","levelValue","levelLabel","coefficient")]
View(dfrcoeff3)
unique(dfrcoeff3$varname)
length(unique(dfrcoeff3$varname))
rm(list=ls())
gc()
source("C:/Users/Pierpaolo/Dropbox/R/Depression/f_TabulateCoefficients_DepNoDep.R")
# models
load("D:/Depression/DepNoDep_models.RData")
rm("dfr")
# information on variables (names, levels, labels)
load("D:/Depression/infoVariables.RData")
# lean model on non-depressed (LN)
coefflean0 <- f_TabulateCoefficients_DepNoDep(ms=ms0, wopt=ilambdalean0, dfr=dfr0, infoVar=dfrvar3)
rm(list=ls())
gc()
source("C:/Users/Pierpaolo/Dropbox/R/Depression/f_TabulateCoefficients_DepNoDep.R")
# models
load("D:/Depression/DepNoDep_models.RData")
rm("dfr")
# information on variables (names, levels, labels)
load("D:/Depression/infoVariables.RData")
# lean model on non-depressed (LN)
coefflean0 <- f_TabulateCoefficients_DepNoDep(ms=ms0, wopt=ilambdalean0, dfr=dfr0, infoVar=dfrvar3)
# lean model on depressed (LD)
coefflean1 <- f_TabulateCoefficients_DepNoDep(ms=ms1, wopt=ilambdalean1, dfr=dfr1, infoVar=dfrvar3)
length(unique(coefflean0$varname))
length(unique(coefflean1$varname))
View(coefflean1)
# full model on non-depressed (FN)
coefffull0 <- f_TabulateCoefficients_DepNoDep(ms=ms0, wopt=ilambdafull0, dfr=dfr0, infoVar=dfrvar3)
# full model on depressed (FD)
coefffull1 <- f_TabulateCoefficients_DepNoDep(ms=ms1, wopt=ilambdafull1, dfr=dfr1, infoVar=dfrvar3)
length(unique(coefffull1$varname))
length(unique(coefffull0$varname))
View(coefflean0)
View(coefflean1)
View(coefffull0)
View(coefffull1)
rm(list=ls())
gc()
install.packages("geeM")
require(geeM)
setwd("C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/MOTU/retrospective study/Code/MOTU_retrospective/")
# load data
dfm <- read.csv("AnonymisedData_04112020.csv")
rm(list=ls())
setwd("C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/MOTU/retrospective study/Code/MOTU_retrospective/")
source("preprocessing.R")
# load data
dfm <- read.csv("AnonymisedData_04112020.csv")
dfm <- preprocessing(dfm)
require(geeM)
ageem1 <- geem(NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), id=AnonymousID,
data = dfm, family=poisson,corstr="ar1")
sum(is.na(dfm$LengthOfStay))
sum(is.na(dfm$NumberAnyFall))
sum(is.na(dfm$AnonymousID))
hist(dfm$LengthOfStay,40)
mean(dfm$LengthOfStay, na.rm=T)
dfm[is.na(dfm$LengthOfStay), "LengthOfStay"] <- mean(dfm$LengthOfStay, na.rm=T)
ageem1 <- geem(NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), id=AnonymousID,
data = dfm, family=poisson,corstr="ar1")
require(GLMMadaptive)
ageem1
# exchangeable
exp(coef(ageem1))*1000
dfm[is.na(dfm$LengthOfStay), "LengthOfStay"] <- mean(dfm$LengthOfStay, na.rm=T)
ageem1 <- geem(NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), id=AnonymousID,
data = dfm, family=poisson,corstr="exchangeable")
# ar1
exp(coef(ageem1))*1000
summary(ageem1)
require(lme4)
?glmer
ame <- glmer(cformula_all, data=dfm, family=poisson(link="log"), nAGQ=20)
cformula_all <- "NumberFallsWithProsthesis ~ offset(log(LengthOfStay)) + (1|AnonymousID)"
ame <- glmer(cformula_all, data=dfm, family=poisson(link="log"), nAGQ=20)
exp(fixef(ame))*1000
ameq <- glmer(cformula_all, data=dfm, family=poisson(link="log"), nAGQ=20, method="quasi")
require(gee)
# sort data by AnonymousID
dfm <- dfm[order(dfm$AnonymousID),]
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="poisson",id=AnonymousID)
exp(coef(angee))*1000
?gee
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="quasipoisson",id=AnonymousID)
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="quasipoisson",id=AnonymousID)
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="quasi",id=AnonymousID)
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link = "log", variance = "constant"),id=AnonymousID)
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link = "log", variance = "mu"),id=AnonymousID)
exp(coef(angee))*1000
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link = "log", variance = "mu^2"),id=AnonymousID)
exp(coef(angee))*1000
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link = "log", variance = "mu^3"),id=AnonymousID)
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link = "log", variance = "mu"),id=AnonymousID)
angee
angee2 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="poisson",id=AnonymousID,
corstr = "exchangeable", scale.fix = TRUE, scale.value = 1)
exp(coef(angee2))*1000
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="poisson",id=AnonymousID,
corstr = "exchangeable")
exp(coef(angee4))*1000
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="mu"),
id=AnonymousID,
corstr = "exchangeable")
exp(coef(angee4))*1000
?glmer
poisson
?poisson
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="mu"),
id=AnonymousID,
corstr = "exchangeable")
exp(coef(angee4))*1000
angee4
summary(angee4)
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="mu^2"), #mu
id=AnonymousID,
corstr = "exchangeable")
exp(coef(angee4))*1000
summary(angee4)
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="constant"), #mu^2
id=AnonymousID,
corstr = "exchangeable")
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasipoisson(link="identity",variance="constant"), #mu, mu^2
id=AnonymousID,
corstr = "exchangeable")
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasipoisson(), #mu, mu^2
id=AnonymousID,
corstr = "exchangeable")
rm(list=ls())
setwd("C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/MOTU/retrospective study/Code/MOTU_retrospective/")
source("preprocessing.R")
# load data
dfm <- read.csv("AnonymisedData_04112020.csv")
dfm <- preprocessing(dfm)
# crude
68/32213*1000
require(lme4)
cformula_all <- "NumberFallsWithProsthesis ~ offset(log(LengthOfStay)) + (1|AnonymousID)"
ame <- glmer(cformula_all, data=dfm, family=poisson(link="log"), nAGQ=20)
exp(fixef(ame))*1000
ameq <- glmer(cformula_all, data=dfm, family=poisson(link="log"), nAGQ=20)
afe <- glm("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))", data=dfm,
family=poisson(link="log"))
exp(coef(afe))*1000
ameq <- glmer(cformula_all, data=dfm, family=quasipoisson(link="log"), nAGQ=20)
require(gee)
# sort data by AnonymousID
dfm <- dfm[order(dfm$AnonymousID),]
angee <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="poisson",id=AnonymousID)
exp(coef(angee))*1000
angee2 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family="poisson",id=AnonymousID,
corstr = "exchangeable", scale.fix = TRUE, scale.value = 1)
exp(coef(angee2))*1000
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="constant"), #mu, mu^2
id=AnonymousID,
corstr = "exchangeable")
angee4 <- gee("NumberFallsWithProsthesis ~ offset(log(LengthOfStay))",
data=dfm, family=quasi(link="log",variance="mu^2"), #mu, mu^2
id=AnonymousID,
corstr = "exchangeable")
exp(coef(angee4))*1000
angee4
require(geeM)
dfm[is.na(dfm$LengthOfStay), "LengthOfStay"] <- mean(dfm$LengthOfStay, na.rm=T)
ageem1 <- geem(NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), id=AnonymousID,
data = dfm, family=poisson,corstr="exchangeable")
# ar1
exp(coef(ageem1))*1000
require(GLMMadaptive)
anba <- mixed_model(fixed = NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), random = ~ 1 | AnonymousID,
data = dfm,family = GLMMadaptive::negative.binomial())
anba
summary(anba)
coef(anba)
class(coef(anba))
dim(coef(anba))
class(fixcoef(anba))
summary(anba)
fix(anba)
fix(anba)
fixef(anba)
exp(fixef(anba))*1000
require(GLMMadaptive)
anba <- mixed_model(fixed = NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), random = ~ 1 | AnonymousID,
data = dfm,family = GLMMadaptive::negative.binomial())
exp(fixef(anba))*1000
?glmer.nb
dfm[is.na(dfm$LengthOfStay), "LengthOfStay"] <- mean(dfm$LengthOfStay, na.rm=T)
anba <- mixed_model(fixed = NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), random = ~ 1 | AnonymousID,
data = dfm,family = GLMMadaptive::negative.binomial())
exp(fixef(anba))*1000
ageem1 <- geem(NumberFallsWithProsthesis ~ offset(log(LengthOfStay)), id=AnonymousID,
data = dfm, family=poisson,corstr="exchangeable")
# ar1
exp(coef(ageem1))*1000
?glmer.nb
?glm
rm(list=ls())
rm(list=ls())
rm(list=ls())
setwd("C:/Users/Pierpaolo/OneDrive - Alma Mater Studiorum Università di Bologna/MOTU/retrospective study/Code/MOTU_retrospective/")
source("preprocessing.R")
# load data
dfm <- read.csv("AnonymisedData_04112020.csv")
dfm <- preprocessing(dfm)
summary(dfm$Sex)
a <- unique(dfm[,c("AnonymousID","Sex")])
summary(a$Sex)

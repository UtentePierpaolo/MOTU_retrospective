typean <- dfsfeat[dfsfeat$trialType==trialType & dfsfeat$nvar==feat,"analysis"]
typean
m <- lmer(ftab, data=cdfr)
summary(m)
VarCorr(m)
View(cdfr)
table(cdfr$vtime)
"acdfr <- aggregate(cdfr)"
?aggregate
acdfr <- aggregate(totalTUGTime ~ patientName, data=cdfr, mean)
View(acdfr)
sd(acdfr$totalTUGTime)
View(acdfr)
acdfr <- aggregate(totalTUGTime ~ patientName, data=cdfr, FUN=mean, subset=vtime=="PRE")
sd(acdfr$totalTUGTime)
acdfr <- aggregate(totalTUGTime ~ patientName, data=cdfr, FUN=mean, subset=vtime=="POST")
sd(acdfr$totalTUGTime)
?VarCorr
VarCorr(m)
class(VarCorr(m))
attributeslass(VarCorr(m))
attributes(VarCorr(m))
VarCorr(m)
dim(VarCorr(m))
rownames(VarCorr(m))
colnames(VarCorr(m))
a <- VarCorr(m)
a$patientName
a
class(a$patientName)
dim(a$patientName)
(a$patientName)+1
dimnames(a$patientName)
attr(a$patientName)
attr(a$patientName, "stddev")
attr(a, "stddev")
attr(VarCorr(m), "stddev")
attr(VarCorr(m), "patientName","stddev")
attr(VarCorr(m), "patientName")
attr(VarCorr(m))
VarCorr(m)
VarCorr(m)["patientName",]
VarCorr(m, "patientName")
vm
vm <- VarCorr(m)
vm
vm$patientName
attr(vm$patientName, "stddev")
attr(vm$patientName, "stddev")
source(paste0(addrCode,"f_tablePrePost.R"))
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
View(tabPrePost)
tabPrePost$delta_percent <- tabPrePost$delta/tabPrePost$sdpre
plot(tabPrePost$delta_percent)
head(tabPrePost$delta_percent)
require(ggplot2)
rownames(tabPrePost)
tabPrePost
ggplot(tabPrePost, aes(x=nvar, y=delta_percent)) +
geom_segment( aes(x=nvar, xend=x, y=0, yend=delta_percent)) +
geom_point( size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2)
ggplot(tabPrePost, aes(x=nvar, y=delta_percent)) +
geom_segment( aes(x=nvar, xend=nvar, y=0, yend=delta_percent)) +
geom_point( size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
tabPrePost
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
tabPrePost$delta_percent <- tabPrePost$delta/tabPrePost$sdpre
ggplot(tabPrePost, aes(x=nvar, y=delta_percent)) +
geom_segment( aes(x=nvar, xend=nvar, y=0, yend=delta_percent)) +
geom_point( size=5, color="red", fill=alpha("orange", 0.3), alpha=0.7, shape=21, stroke=2)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
unique(tabPrePost$trialType)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
expression(paste(Delta, "PostVPS-PRE/SD"))
print(expression(paste(Delta, "PostVPS-PRE/SD")))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
?alpha
alpha("red", alpha=0.3)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
tabPrePost <- tabPrePost %>%
mutate(mycolor = ifelse(trialType=="TUG", "type1", "type2"))
tabPrePost$mycolor=ifelse(tabPrePost$trialType=="TUG", "type1", "type2")
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
require(dplyr)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
tabPrePost <- tabPrePost %>%
mutate(mycolor = ifelse(trialType=="TUG", "type1", "type2"))
View(tabPrePost)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
names(tabPrePost)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
aes(x=nvar, xend=nvar, y=0, yend=delta_percent,color=trialType)
?aes
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
?reorder
dfrank <- tabPrePost[,"delta_percent","trialType","nvar"]
dfrank <- tabPrePost[,c("delta_percent","trialType","nvar")]
?aggregate
dfrank <- aggregate(delta_percent~nvar, data=dfrank, FUN=max)
View(dfrank)
dfrank <- dfrank[order(dfrank$delta_percent),]
View(dfrank)
?order
dfrank <- dfrank[order(dfrank$delta_percent,decreasing=T),]
View(dfrank)
dfrank$rank <- 1:nrow(dfrank)
View(dfrank)
View(dfrank)
tabPrePost <- merge(tabPrePost, dfrank[,c("nvar","rank")], by="nvar")
tabPrePost$nvar <- with(tabPrePost, reorder(nvar, rank)
if(!is.null(fileAddrName)){
png(filename=fileAddrName,
width =10,height =5, units = 'in', res = 300)
}
myplot <- ggplot(tabPrePost, aes(x=nvar, y=delta_percent)) +
geom_segment( aes(x=nvar, xend=nvar, y=0, yend=delta_percent,color=trialType)) +
geom_point( size=5, alpha=0.7, aes(color=trialType)) +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(angle=90)
) +
xlab("") +
ylab(expression(paste(Delta[PostVPS-PRE]/SD)))
print(myplot)
if(!is.null(fileAddrName)){
dev.off()
}
}
tabPrePost$nvar <- with(tabPrePost, reorder(nvar, rank))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, trialType=c("TUG","18mWt"),
fileAddrName=paste0(addrFigure,"Changes.png"))
names(tabPrePost)
# split TUG and 18mWt
tabPrePostTUG <- tabPrePost[tabPrePost$trialType=="TUG", c("nvar","delta_percent")]
names(tabPrePostTUG)[names(tabPrePostTUG)=="delta_percent"] <- "delta_percentTUG"
tabPrePost18mWt <- tabPrePost[tabPrePost$trialType=="18mWt", c("nvar","delta_percent")]
names(tabPrePost18mWt)[names(tabPrePost18mWt)=="delta_percent"] <- "delta_percent18mWt"
head(tabPrePostTUG)
head(tabPrePost18mWt)
# split and merge TUG and 18mWt
tabPrePostTUG <- tabPrePost[tabPrePost$trialType=="TUG", c("nvar","delta_percent")]
names(tabPrePostTUG)[names(tabPrePostTUG)=="delta_percent"] <- "delta_percentTUG"
tabPrePost18mWt <- tabPrePost[tabPrePost$trialType=="18mWt", c("nvar","delta_percent")]
names(tabPrePost18mWt)[names(tabPrePost18mWt)=="delta_percent"] <- "delta_percent18mWt"
tabPrePost <- merge(tabPrePostTUG,tabPrePost18mWt, all=T)
names(tabPrePost)
source(paste0(addrCode,"f_tablePrePost.R"))
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
require(ggplot2)
tabPrePost$delta_percent <- tabPrePost$delta/tabPrePost$sdpre
# change variables order
dfrank <- tabPrePost[,c("delta_percent","trialType","nvar")]
dfrank <- aggregate(delta_percent~nvar, data=dfrank, FUN=max)
dfrank <- dfrank[order(dfrank$delta_percent,decreasing=T),]
dfrank$irank <- 1:nrow(dfrank)
tabPrePost <- merge(tabPrePost, dfrank[,c("nvar","irank")], by="nvar", all.x=T)
tabPrePost$nvar <- with(tabPrePost, reorder(nvar, irank))
# split and merge TUG and 18mWt
tabPrePostTUG <- tabPrePost[tabPrePost$trialType=="TUG", c("nvar","delta_percent")]
names(tabPrePostTUG)[names(tabPrePostTUG)=="delta_percent"] <- "delta_percentTUG"
tabPrePost18mWt <- tabPrePost[tabPrePost$trialType=="18mWt", c("nvar","delta_percent")]
names(tabPrePost18mWt)[names(tabPrePost18mWt)=="delta_percent"] <- "delta_percent18mWt"
tabPrePost <- merge(tabPrePostTUG,tabPrePost18mWt, all=T)
myplot <- ggplot(tabPrePost) +
geom_segment(aes(x=nvar, xend=nvar, y=0, yend=delta_percentTUG),color="green") +
geom_segment(aes(x=nvar, xend=nvar, y=0, yend=delta_percent18mWt),color="blue") +
geom_point(aes(x=x, y=delta_percentTUG), size=5, alpha=0.7, color="green") +
geom_point(aes(x=x, y=delta_percent18mWt), size=5, alpha=0.7, color="blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(angle=90)
) +
xlab("") +
ylab(expression(paste(Delta[PostVPS-PRE]/SD)))
myplot
myplot <- ggplot(tabPrePost) +
geom_segment(aes(x=nvar, xend=nvar, y=0, yend=delta_percentTUG),color="green") +
geom_segment(aes(x=nvar, xend=nvar, y=0, yend=delta_percent18mWt),color="blue") +
geom_point(aes(x=nvar, y=delta_percentTUG), size=5, alpha=0.7, color="green") +
geom_point(aes(x=nvar, y=delta_percent18mWt), size=5, alpha=0.7, color="blue") +
theme_light() +
theme(
panel.grid.major.x = element_blank(),
panel.border = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(angle=90)
) +
xlab("") +
ylab(expression(paste(Delta[PostVPS-PRE]/SD)))
print(myplot)
dev.off()
source(paste0(addrCode,"f_tablePrePost.R"))
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
tabm
source(paste0(addrCode,"f_tablePrePost.R"))
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
names(tabPrePostTUG)
names(tabPrePost)
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
rm(list=ls())
addrData <- "C:/Users/p-pie/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Hydrocephalus/Data/"
addrCode <- "C:/Users/p-pie/Dropbox/R/Hydrocephalus/"
addrTable <- "C:/Users/p-pie/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Hydrocephalus/Tables/Tables_17032021.xlsx"
addrFigure <- "C:/Users/p-pie/OneDrive - Alma Mater Studiorum Università di Bologna/Documents/Hydrocephalus/Figures/"
require(readxl)
require(writexl)
source(paste0(addrCode,"preprocess_sensorData.R"))
source(paste0(addrCode,"preprocess_clinicalData.R"))
source(paste0(addrCode,"preprocess_personalData.R"))
source(paste0(addrCode,"f_patientFlow.R"))
source(paste0(addrCode,"f_descriptivePersonal.R"))
source(paste0(addrCode,"f_corr.R"))
source(paste0(addrCode,"f_tablePrePost.R"))
source(paste0(addrCode,"models_preTTpost.R"))
source(paste0(addrCode,"f_scatterplot1.R"))
# variables list
varlist <- read.csv(paste0(addrData,"VariablesToInclude_15042021.csv"))
# sensor data
dfs <- as.data.frame(read_xlsx(path=paste0(addrData,"09_03_2020/misureTUGe18mMar.xlsx")))
# clinical data
dfc <- as.data.frame(read_xlsx(path=paste0(addrData,"Copia di PRO_Idro_ScaleCliniche03_03_21.xlsx")))
# other personal data
vdates <- c("Data di Nascita","Data ricovero","data_taptest","data_taptest_2","Data NCH") # "Controllo_6_mesi"
nvdates <- c(2,10,11,12,14) # 16
col_types <- rep("guess", 34) #ncol(dfradd)
col_types[nvdates] <- "date"
dfp <- as.data.frame(read_xlsx(path=paste0(addrData,"09_03_2020/PRO_Idro_AvanzamentoPazienti_2020_03_02_AFPERSONAL1.xlsx"),
sheet="Follow-up", col_types=col_types))
# sensor data
lds <- preprocess_sensorData(dfs=dfs, varlist=varlist)
dfs <- lds$dfs_o
dfsfeat <- lds$dfsfeat
# clinical data
ldc <- preprocess_clinicalData(dfc=dfc, varlist=varlist)
dfc <- ldc$dfc
dfcfeat <- ldc$dfcfeat
# personal data
dfp <- preprocess_personalData(dfp=dfp)
# patient-data flow------------------------
ldr <- f_patientFlow(dfci=dfc, dfs=dfs)
dfc <- ldr$dfc
dfs <- ldr$dfs
(tabcount <- ldr$tabcount)
# select subjects
# out because of TUG
IDoutTUG <- dfc[dfc$inTUG==0, "patientName"]
dfc <- dfc[dfc$inTUG | dfc$in18mWt,]
dfs <- dfs[dfs$patientName %in% dfc$patientName,]
dfp_out <- dfp[dfp$patientName %in% IDoutTUG,]
dfp <- dfp[dfp$patientName %in% dfc$patientName,]
# descriptive statistics----------------------
# Age, ARWMC, BMI...
tabDescript <- f_descriptivePersonal(dfp)
tabDescript_out <- f_descriptivePersonal(dfp_out)
# correlation----------------------------------
# between clinical and sensor features
# in PRE
tabCorr <- f_corr(dfc, dfs, dfcfeat=dfcfeat,dfsfeat=dfsfeat)
# pre-post-------------------------------------
tabPrePost <- f_tablePrePost(dfc,dfs,dfcfeat=dfcfeat,dfsfeat=dfsfeat)
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
source(paste0(addrCode,"f_tablePrePost.R"))
f_plotPrePost(tabPrePost, fileAddrName=paste0(addrFigure,"Changes.png"))
rm(list=ls())
# load and pre-process data----------------
load("D:/Depression/GroupLasso_Nodep.RData")
notes
rm(list=ls())
gc()
source("C:/Users/Pierpaolo/Dropbox/R/Depression/preprocessing.R")
source("C:/Users/p-pie/Dropbox/R/Depression/preprocessing.R")
require(grplasso)
require(ROCR)
source("C:/Users/p-pie//Dropbox/R/myfunc/divideKfold.R")
# load data
dfr <- read.csv("D:/datasets/share/share_selected_data.csv/share_selected_data.csv", sep=",")
# identify how is depressed and who is not at baseline
# - separare campione in due parti
# 1) con massimo 3 sintomi dep siano fatigue (euro9) appetite (euro8) sleep (euro5)
# 2) tutti gli altri
alleuro <- paste0("euro",1:12)
alleuro
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
# pre-process data
lprep <- preprocessing(dfm=dfr)
dfr <- lprep[["dfm"]]
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
rm(list=ls())
gc()
source("C:/Users/p-pie/Dropbox/R/Depression/preprocessing.R")
require(grplasso)
require(ROCR)
source("C:/Users/p-pie//Dropbox/R/myfunc/divideKfold.R")
# load data
dfr <- read.csv("D:/datasets/share/share_selected_data.csv/share_selected_data.csv", sep=",")
# identify how is depressed and who is not at baseline
# - separare campione in due parti
# 1) con massimo 3 sintomi dep siano fatigue (euro9) appetite (euro8) sleep (euro5)
# 2) tutti gli altri
alleuro <- paste0("euro",1:12)
vtoexclude <- c("sl_ac002d4", "iadl", "ph076_1", "sl_ac002d10", "sl_ac002d5", "ph076_4", "sl_ac002d8",
"sl_ac002d1", "sl_ac002d6", "ph076_3", "drugtypes", "adl", "sl_ac002d9", "sl_ac002d2", "sl_hs045d3",
"sl_ac002dno", "sl_ac002d7", "ph076_2", "sl_ac002d3", "eurod", "country")
vid <- "mergeid"
voutcome <- "eurodcat_w6"
dfm <- dfm[,setdiff(names(dfm),vtoexclude)]
dfm <- dfr
dfm <- dfm[,setdiff(names(dfm),vtoexclude)]
# see which variables have negative values
vneg <- vector()
for (cvar in setdiff(names(dfm),"mergeid")){
if (length(which(dfm[,cvar]<0))>0){
vneg <- c(vneg,cvar)
}
}
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
# collapse negative values to NA
for (ind in 1:length(vneg)){
dfm[which(dfm[,vneg[ind]] < 0), vneg[ind]] <- NA
}
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
# continuous and categorical predictors
contvar <- c("hc002_","age_int","ph092_","dn041_","ch001_","ch021_","ac012_","hhsize", # ,"cliw_f"
paste0("euro",1:12))
# categorical
catvar <- setdiff(names(dfm),c(contvar,"mergeid","eurodcat_w6"))
for (ind in 1:length(catvar)){
dfm[,catvar[ind]] <- factor(dfm[,catvar[ind]], exclude=NULL)
# type of contrast. Maybe not that relevant for my purposes
contrasts(dfm[,catvar[ind]]) <- "contr.sum"
}
# put cap on some variables, as done by Luca C
ch021_max <- 25 #A reasonable cap on the number of grandchildren
dfm[which(dfm$ch021_ > ch021_max),"ch021"] <- ch021_max
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
# later on, consider imputing missing data with mice
# easy imputation for continous data
for (ccontvar in contvar){
dfm[is.na(dfm[,ccontvar]), ccontvar] <- median(dfm[,ccontvar], na.rm=T)
}
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
sapply(dfm[,alleuro], function(x) sum(is.na(x)))
ccontvar
contvar
dfm <- dfr
vtoexclude <- c("sl_ac002d4", "iadl", "ph076_1", "sl_ac002d10", "sl_ac002d5", "ph076_4", "sl_ac002d8",
"sl_ac002d1", "sl_ac002d6", "ph076_3", "drugtypes", "adl", "sl_ac002d9", "sl_ac002d2", "sl_hs045d3",
"sl_ac002dno", "sl_ac002d7", "ph076_2", "sl_ac002d3", "eurod", "country")
vid <- "mergeid"
voutcome <- "eurodcat_w6"
dfm <- dfm[,setdiff(names(dfm),vtoexclude)]
# see which variables have negative values
vneg <- vector()
for (cvar in setdiff(names(dfm),"mergeid")){
if (length(which(dfm[,cvar]<0))>0){
vneg <- c(vneg,cvar)
}
}
# collapse negative values to NA
for (ind in 1:length(vneg)){
dfm[which(dfm[,vneg[ind]] < 0), vneg[ind]] <- NA
}
# continuous and categorical predictors
contvar <- c("hc002_","age_int","ph092_","dn041_","ch001_","ch021_","ac012_","hhsize", # ,"cliw_f"
paste0("euro",1:12))
# categorical
catvar <- setdiff(names(dfm),c(contvar,"mergeid","eurodcat_w6"))
for (ind in 1:length(catvar)){
dfm[,catvar[ind]] <- factor(dfm[,catvar[ind]], exclude=NULL)
# type of contrast. Maybe not that relevant for my purposes
contrasts(dfm[,catvar[ind]]) <- "contr.sum"
}
# put cap on some variables, as done by Luca C
ch021_max <- 25 #A reasonable cap on the number of grandchildren
dfm[which(dfm$ch021_ > ch021_max),"ch021"] <- ch021_max
sapply(dfm[,alleuro], function(x) sum(is.na(x)))
rm(list=ls())
gc()
# identify how is depressed and who is not at baseline
# - separare campione in due parti
# 1) con massimo 3 sintomi dep siano fatigue (euro9) appetite (euro8) sleep (euro5)
# 2) tutti gli altri
alleuro <- paste0("euro",1:12)
# load data
dfr <- read.csv("D:/datasets/share/share_selected_data.csv/share_selected_data.csv", sep=",")
dfm=dfr
sapply(dfm[,alleuro], function(x) sum(is.na(x)))
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
vtoexclude <- c("sl_ac002d4", "iadl", "ph076_1", "sl_ac002d10", "sl_ac002d5", "ph076_4", "sl_ac002d8",
"sl_ac002d1", "sl_ac002d6", "ph076_3", "drugtypes", "adl", "sl_ac002d9", "sl_ac002d2", "sl_hs045d3",
"sl_ac002dno", "sl_ac002d7", "ph076_2", "sl_ac002d3", "eurod", "country")
vid <- "mergeid"
voutcome <- "eurodcat_w6"
dfm <- dfm[,setdiff(names(dfm),vtoexclude)]
# see which variables have negative values
vneg <- vector()
for (cvar in setdiff(names(dfm),"mergeid")){
if (length(which(dfm[,cvar]<0))>0){
vneg <- c(vneg,cvar)
}
}
# collapse negative values to NA
for (ind in 1:length(vneg)){
dfm[which(dfm[,vneg[ind]] < 0), vneg[ind]] <- NA
}
# continuous and categorical predictors
contvar <- c("hc002_","age_int","ph092_","dn041_","ch001_","ch021_","ac012_","hhsize", # ,"cliw_f"
paste0("euro",1:12))
# categorical
catvar <- setdiff(names(dfm),c(contvar,"mergeid","eurodcat_w6"))
for (ind in 1:length(catvar)){
dfm[,catvar[ind]] <- factor(dfm[,catvar[ind]], exclude=NULL)
# type of contrast. Maybe not that relevant for my purposes
contrasts(dfm[,catvar[ind]]) <- "contr.sum"
}
# put cap on some variables, as done by Luca C
ch021_max <- 25 #A reasonable cap on the number of grandchildren
dfm[which(dfm$ch021_ > ch021_max),"ch021"] <- ch021_max
sapply(dfr[,alleuro], function(x) sum(is.na(x)))
median(dfm[,ccontvar], na.rm=T)
sapply(dfr[,alleuro], function(x) median(x))
sapply(dfr[,alleuro], function(x) median(x, na.rm=T))
sapply(dfm[,alleuro], function(x) median(x, na.rm=T))
rm(list=ls())
gc()
setwd("C:/Users/p-pie/OneDrive - Alma Mater Studiorum Università di Bologna/MOTU/retrospective study/Code/MOTU_retrospective/")
# load data
# old version: https://figshare.com/s/c84ae0d82a3e053ab668
dfr <- read.csv("AnonymisedData_21032021.csv",
stringsAsFactors=T)
names(dfr)
list.files()
# load data
# old version: https://figshare.com/s/c84ae0d82a3e053ab668
dfr <- read.csv("AnonymisedData_04112020.csv",
stringsAsFactors=T)
names(dfr)
dfr$AMPAdmissionScore
sum(!is.na(dfr$AMPAdmissionScore))
sum(!is.na(dfr$TWTInitialTime_m))
sum(!is.na(dfr$LCIInitialScore))
